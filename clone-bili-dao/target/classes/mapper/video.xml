<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.ory//DTD MAPPER 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Dao.VideoDao">

    <insert id="addVideos" parameterType="domain.Video" useGeneratedKeys="true" keyProperty="id">
        insert into t_video (
            id, userId, url, thumbnail, title, `type`, duration, area, description, createTime
        ) values (
            #{id}, #{userId}, #{url}, #{thumbnail}, #{title}, #{type}, #{duration}, #{area}, #{description}, #{createTime}
        )
    </insert>
    <insert id="batchAddVideoTags" parameterType="java.util.List">
        insert into t_video_tag(
            videoId, tagId, createTime
        ) values
        <foreach collection="videoTagList" item="videoTag" separator=",">
        (
            #{videoId}, #{tagId}, #{createTime}
        )
        </foreach>
    </insert>
    <insert id="addVideoLike" parameterType="domain.VideoLike">
        insert into t_video_like(
            userId, videoId, createTime
        ) values (
            #{userId}, #{videoId}, #{createTime}
        )
    </insert>
    <insert id="addVideoCollection">
        insert into t_video_collection (
            userId, videoId, groupId, createTime
        ) values (
            #{userId}, #{videoId}, #{groupId}, #{createTime}
        )
    </insert>
    <insert id="addVideoCoin">
        insert into t_video_coin(
            userId, videoId, amount, createTime
        ) values (
            #{userId}, #{videoId}, #{amount}, #{createTime}
        )
    </insert>
    <insert id="addVideoComment">
        insert into t_video_comment (
            userId, videoId, comment, replyUserId, rootId, createTime
        ) values (
            #{userId}, #{videoId}, #{comment}, #{replyUserId}, #{rootId}, #{createTime}
        )
    </insert>
    <update id="updateVideoCoin">
        update
            t_video_coin
        set
            amount = #{amount},
            updateTime = #{updateTime}
        where
            videoId = #{videoId} and userId = #{userId}
    </update>
    <delete id="deleteVideoLike">
        delete from t_video_like where videoId = #{videoId} and userId = #{userId}
    </delete>
    <delete id="deleteVideoCollection">
        delete from t_video_collection where videoId = #{videoId} and userId = #{userId}
    </delete>
    <select id="pageCountVideos" resultType="java.lang.Integer" parameterType="java.util.Map">
        select
            count(1)
        from
            t_video
        where
            1=1
            <if test="area != null and area != ''">
                and area = #{area}
            </if>
    </select>
    <select id="pageListVideos" resultType="domain.Video" parameterType="java.util.Map">
        select
            *
        from
            t_video
        where
            1=1
            <if test="area != null and area != ''">
                and area = #{area}
            </if>
        order by id desc
        limit #{start}, #{limit}
    </select>
    <select id="getVideoById" resultType="domain.Video" parameterType="java.lang.Long">
        select * from t_video where id = #{id}
    </select>
    <select id="getVideoLikeByVideoIdAndUserId" resultType="domain.VideoLike">
        select * from t_video_like where videoId = #{videoId} and userId = #{userId}
    </select>
    <select id="getVideoLikes" resultType="java.lang.Long" parameterType="java.lang.Long">
        select count(1) from t_video_like where videoId = #{videoId}
    </select>
    <select id="getVideoCollections" resultType="java.lang.Long">
        select count(1) from t_video_collection where videoId = #{videoId}
    </select>
    <select id="getVideoCollectionByVideoIdAndUserId" resultType="domain.VideoCollection">
        select * from t_video_collection where videoId = #{videoId} and userId = #{userId}
    </select>
    <select id="getVideoCoinByVideoIdAndUserId" resultType="domain.VideoCoin">
        select * from t_video_coin where videoId = #{videoId} and userId = #{userId}
    </select>
    <select id="getVideoCoinsAmount" resultType="java.lang.Long">
        select sum(amount) from t_video_coin where videoId = #{videoId}
    </select>
    <select id="pageListVideoComment" resultType="domain.VideoComment">
        select
            *
        from
            t_video_comment
        where
            videoId = #{videoId} and rootId is null
        order by id desc
        limit #{start}, #{limit}
    </select>
    <select id="pageCountVideoComment" resultType="java.lang.Integer">
        select
            count(1)
        from
            t_video_comment
        where
            videoId = #{videoId} and rootId is null
    </select>
    <select id="batchGetVideoCommentsByRootId" resultType="domain.VideoComment">
        select 
            *
        from
            t_video_comment
        where
            rootId in 
        <foreach collection="rootIdList" separator="," item="rootId" open="(" close=")">
            #{rootId}
        </foreach>
        order by id
    </select>
    <select id="getVideoDetails" resultType="domain.Video">
        select * from t_video where id = #{id}
    </select>
</mapper>
